gofullpage

https://areumportfolio.netlify.app/#anchor1

https://sominpark.netlify.app/#null
https://parkjiyeon.netlify.app/
https://yeogyeongs.github.io/hyg/portfolio/index.html#anchor5


//르위켄 메뉴달기
//milli 메뉴달기
//confer 날짜 돌아가는 거 달수 있으면 달기
//스크롤 반응 js 설명할 수 있도록 숙지
//유효성검사 (html css)
//사용한 jquery 지금 치라면 칠 수 있음?



//스크롤탑을 이용한 원페이지 제작 / scrollTop() 

https://blog.naver.com/PostView.naver?blogId=ysboo2&logNo=221692008906&categoryNo=63&parentCategoryNo=0&viewDate=&currentPage=13&postListTopCurrentPage=&from=postList&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=13



//원페이지_부드러운 위치 이동
https://blog.naver.com/PostView.naver?blogId=ysboo2&logNo=221677881795&categoryNo=63&parentCategoryNo=0&viewDate=&currentPage=15&postListTopCurrentPage=&from=postList&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=15&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=15




//레이아웃 -포트폴리오
https://blog.naver.com/PostView.naver?blogId=ysboo2&logNo=221677919697&categoryNo=63&parentCategoryNo=0&viewDate=&currentPage=15&postListTopCurrentPage=&from=postList&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=15



//페이지 앵커 부드러운 스크롤 animate()
https://blog.naver.com/PostView.naver?blogId=ysboo2&logNo=221883842798&categoryNo=63&parentCategoryNo=0&viewDate=&currentPage=8&postListTopCurrentPage=&from=postList&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=8


//one page section
https://blog.naver.com/PostView.naver?blogId=ysboo2&logNo=221825491834&categoryNo=63&parentCategoryNo=0&viewDate=&currentPage=8&postListTopCurrentPage=1&from=postList&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=8




//menu -resize / 원페이지 section 찾아 주기 / addClass 
https://blog.naver.com/PostView.naver?blogId=ysboo2&logNo=221706669534&categoryNo=63&parentCategoryNo=0&viewDate=&currentPage=9&postListTopCurrentPage=&from=postList&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=9







css keyframe
transition VS animation 차이
transition 속성과 animation 속성은 플래시의 기술이나 자바스크립트의 도움 없이 요소에 직접 애니메이션 효과를 적용하는 속성이다.
transition 속성은 요소의 상태가 변해야 애니메이션을 실행한다.
animation 속성은 요소의 모양과 동작을 키프레임 단위로 변경할 수 있다. 키프레임 동작은 재생 횟수, 재생 방향등 여러 애니메이션 속성으로 제어할 수 있다.
transition 속성과 animation 속성의 가장 큰 차이는 transition 속성은 요소의 상태가 바뀌어야 바뀌는 상태를 애니메이션으로 표현하지만, animation 속성은 요소의 상태 변화와 상관 없이 애니메이션을 실행한다. 또한 @keyframes 속성으로 프레임을 추가할 수 있다.


0% : 애니메이션의 시작 프레임이다.
100% : 애니메이션의 마지막 프레임이다.


그러면 작성한 @keyframes는 어떻게 적용하는지 살펴보도록 하겠습니다.
작성한 @keyframes를 적용하기 위해 animation 속성을 사용합니다.

animation 속성은 어떤 애니메이션을 적용할지, 적용한 애니메이션을 언제 시작할지, 시작을 하게 되면 시작부터 종료까지의 시간은 어떻게 할지, 애니메이션을 반복회수 등을 설정할 수 있습니다.
즉 @keyframes에서는 애니메이션의 움직임이나 효과, animation 속성에서는 시간을 설정합니다.

왜 따로따로 설정을 하는지 
이유는 하나의 동작을 여러 곳에서 사용하기 위해서입니다.








